package cepPost;

import com.ftn.sbnz.model.patient.Patient;
import com.ftn.sbnz.model.procedure.Procedure;
import com.ftn.sbnz.model.events.HeartBeatEvent;
import com.ftn.sbnz.model.events.SAPEvent;
import com.ftn.sbnz.model.events.BreathEvent;
import com.ftn.sbnz.model.events.PulseOximetryEvent;
import com.ftn.sbnz.model.events.RetardDTO;
import com.ftn.sbnz.model.procedure.Alarm;


import com.ftn.sbnz.service.SocketService;

import com.ftn.sbnz.model.events.SymptomEvent;

global SocketService socketService;
global ProcedureRepository procedureRepository;

declare VasopressorIV
    @role(event)
    @expires(16m)
    patientId: Long
end

rule "update bpm"
    when
        $patient : Patient($id: id)
        $procedure: Procedure(patientId == $id, postOperative != null, $postOp: postOperative)
        Number($count : intValue) from accumulate(
            $heartBeat: HeartBeatEvent(patientId == $id)
            over window: time(1m), count($heartBeat)
        )
    then
        socketService.sendBpmPostOp($count, $procedure.getId());
        System.out.println("BPM::" + $postOp);
end

rule "update sap"
    when
        $patient : Patient($id: id)
        $procedure: Procedure(patientId == $id, postOperative != null, $postOp: postOperative)
        Number($count : doubleValue) from accumulate(
            $sap: SAPEvent(patientId == $id) over window: time(5m), average($sap.getValue())
        )
    then
        socketService.sendSapPostOp((int) $count, $procedure.getId());
        System.out.println("SAP::" + $postOp);
end

rule "normal bpm"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id)
        Number($count : intValue) from accumulate(
            $heartBeat: HeartBeatEvent(patientId == $id)
            over window: time(1m), count($heartBeat)
        )
        eval($count >= 61 && $count <= 79)
    then
        //tahikardija
        System.out.println("Normal bpm.");
        socketService.sendCardioAlarm($procedureId, null);
end


rule "tachycardia rule"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id)
        Number($count : intValue) from accumulate(
            $heartBeat: HeartBeatEvent(patientId == $id)
            over window: time(1m), count($heartBeat)
        )
        eval($count > 80)
    then
        //tahikardija
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Tachycardia));
end

rule "tachycardia alarm"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, $procedureId: id)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Tachycardia))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected tachycardia.");
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Tachycardia, System.currentTimeMillis());

        modify($intraOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);

        socketService.sendCardioAlarm($procedureId, SymptomEvent.Symptom.Tachycardia);
end

rule "bradycardia rule"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, $start: start)
        $retard: RetardDTO(procedureId == $procedureId, $current: unixTime)
        Number($count : intValue) from accumulate(
            $heartBeat: HeartBeatEvent(patientId == $id)
            over window: time(1m), count($heartBeat)
        )
        eval($count < 60 && $count > 0 && ($start + 60000) < $current)
        // eval($start + 60000 < $current)
    then
        //bradikardija
        System.out.println("Bradycardia detected.");
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Bradycardia));    
end

rule "bradycardia alarm"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, $procedureId: id)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Bradycardia))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected bradycardia.");
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Bradycardia, System.currentTimeMillis());

        modify($intraOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);

        socketService.sendCardioAlarm($procedureId, SymptomEvent.Symptom.Bradycardia);
end

// Post op
rule "Post op SAP - Crystalloids"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null)
        Number($averageVal: doubleValue) from accumulate(
            $sap: SAPEvent(patientId == $id) over window: time(5m), average($sap.getValue())
        )
        eval($averageVal < ($patient.getBasalSAP() - 20) && $averageVal > ($patient.getBasalSAP() - 50))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Initiate IV crystalloids and alert anesthesiologist.");
        // send IV crystalloids       
end

rule "Post op SAP - Vasopressors Infusion"
    when
        $patient: Patient($id: id, $basalSAP: basalSAP)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null)
        not(VasopressorIV(patientId == $id))
        Number($averageVal: doubleValue) from accumulate(
            $sap: SAPEvent(patientId == $id) over window: time(5m), average($sap.getValue())
        )
        eval($averageVal <= ($basalSAP - 50))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Start vasopressors infusion.");
        // insert(new Alarm($id, $doctorId, "Start vasopressors infusion."));
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Hypotension, System.currentTimeMillis());
        modify($intraOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
        insert(new VasopressorIV($id));
        
end

rule "Post op SAP - Vasopressors IV still low"
    when
        $patient: Patient($id: id, $basalSAP: basalSAP)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null, $postOp: postOperative)
        $vasopressorIV: VasopressorIV(patientId == $id)
        $SAPEvent: SAPEvent(this after[15m] $vasopressorIV, patientId == $id, value <= ($basalSAP - 50))
    then
        System.out.println("Patient " + $patient.getFullname() + ": determine hemoglobin.");
        // insert(new Alarm($id, $doctorId, "Determine hemoglobin."));

        modify($postOp){
            setDoHemoglobin(true);
        }

        procedureRepository.save($procedure);
end

rule "Hemoglobin results"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null, postOperative.getHemoglobin() < 70 && postOperative.getHemoglobin() > 0)
    then
        System.out.println("Patient " + $patient.getFullname() + ": give blood transfusion.");
        // insert(new Alarm($id, $doctorId, "Give patient blood transfusion."));
end

rule "Post op SAP - Inc"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null)
        Number($averageVal: doubleValue) from accumulate(
            $sap: SAPEvent(patientId == $id) over window: time(5m), average($sap.getValue())
        )
        eval($averageVal >= ($patient.getBasalSAP() + 20) && $averageVal <= ($patient.getBasalSAP() + 50))
    then
        System.out.println("Patient " + $patient.getFullname() + ": бол, делиријум, мучнина и повраћање, плитко дисање.");
        // insert(new Alarm($id, $doctorId, "Determine if has pain, delirium, nausea and vomiting or shallow breathing."));
        // send alert
end

rule "Post op SAP - Inc 50"
    when
        $patient: Patient($id: id, $basalSAP: basalSAP)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, postOperative != null)
        Number($averageVal: doubleValue) from accumulate(
            $sap: SAPEvent(patientId == $id) over window: time(5m), average($sap.getValue())
        )
        eval($averageVal >= ($basalSAP + 50))
    then
        System.out.println("Patient " + $patient.getFullname() + ": give hypertensive.");
        // insert(new Alarm($id, $doctorId, "Give patient hypertensive."));

        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Hypertension, System.currentTimeMillis());
        modify($intraOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
        // Todo add alert
end


// pulse oximetry
rule "update pulse oximetry"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, postOperative != null)
        Number($count : doubleValue) from accumulate(
            $pulseOximetry: PulseOximetryEvent(patientId == $id)
            over window: time(5m), average($pulseOximetry.getValue())
        )
    then
        socketService.sendPulseOximetry($count, $procedure.getId());
end


rule "normal pulse oximetry"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count : doubleValue) from accumulate(
            $pulseOximetry: PulseOximetryEvent(patientId == $id)
            over window: time(5m), average($pulseOximetry.getValue())
        )
        eval($count >= 92.0 && $count <= 100.0)
    then
        System.out.println("Normal pulse oximetry.");
end

rule "hypoxemia rule"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count : doubleValue) from accumulate(
            $pulseOximetry: PulseOximetryEvent(patientId == $id)
            over window: time(5m), average($pulseOximetry.getValue())
        )
        eval($count < 92.0 && $count > 70.0)
    then
        System.out.println("Hypoxemia detected.");
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Hypoxemia));
end

rule "hypoxemia alarm rule"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, $procedureId: id, postOperative != null, $postOp: postOperative)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Hypoxemia))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected hypoxemia.");
        // insert(new Alarm($id, $doctorId, "Detected hypoxemia."));
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Hypoxemia, System.currentTimeMillis());
        modify($postOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
end

rule "hypoxemia venilator rule"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, $procedureId: id, postOperative != null)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Hypoxemia))
        Number($count : doubleValue) from accumulate(
            $pulseOximetry: PulseOximetryEvent(patientId == $id)
            over window: time(5m), average($pulseOximetry.getValue())
        )
        eval($count < 90.0 && $count > 0.0)
    then
        System.out.println("Patient " + $patient.getFullname() + ": Connect patient to ventilator.");
        // insert(new Alarm($id, $doctorId, "Connect patient to ventilator."));

end

rule "cyanosis rule"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count : doubleValue) from accumulate(
            $pulseOximetry: PulseOximetryEvent(patientId == $id)
            over window: time(5m), average($pulseOximetry.getValue())  
        )
        eval($count < 67.0 && $count > 0.0)
    then
        System.out.println("Cyanosis detected.");
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Cyanosis));
end

rule "cyanosis alarm rule"
    when 
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $doctorId: medicalStaffId, $procedureId: id, postOperative != null, $postOp: postOperative)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Cyanosis))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected cyanosis.");
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Cyanosis, System.currentTimeMillis());
        modify($postOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
end


// breath frequency
rule "Update breath frequency"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, postOperative != null)
        Number($count: intValue) from accumulate(
            $e: BreathEvent(patientId == $id)
            over window: time(1m), count($e)
        )
    then
        socketService.sendBreathFrequency($count, $procedure.getId());
end

rule "Normal breath frequency"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count: intValue) from accumulate(
            $e: BreathEvent(patientId == $id)
            over window: time(1m), count($e)
        )
        eval($count >= 12 && $count <= 20)
    then
        System.out.println("Normal breath frequency.");
        socketService.sendBreathAlarm($procedureId, null);
end

rule "Breath frequency - tachypnea"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count: intValue) from accumulate(
            $e: BreathEvent(patientId == $id)
            over window: time(1m), count($e)
        )
        eval($count > 20)
    then
        System.out.println("Patient " + $patient.getFullname() + ": Tachypnea detected.");
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Tachypnea));
end


rule "Tachypnea alarm rule"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null, $postOp: postOperative)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Tachypnea))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected tachypnea.");
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Tachypnea, System.currentTimeMillis());

        modify($postOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
end

rule "Breath frequency - bradypnea"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null)
        Number($count: intValue) from accumulate(
            $e: BreathEvent(patientId == $id)
            over window: time(1m), count($e)
        )
        eval($count < 12 && $count > 0)
    then
        System.out.println("Patient " + $patient.getFullname() + ": Bradypnea detected.");
        insert(new SymptomEvent($id, $procedureId, SymptomEvent.Symptom.Bradypnea));
end

rule "Bradypnea alarm rule"
    when
        $patient: Patient($id: id)
        $procedure: Procedure(patientId == $id, $procedureId: id, postOperative != null, $postOp: postOperative)
        exists(SymptomEvent(patientId == $id, procedureId == $procedureId, symptom == SymptomEvent.Symptom.Bradypnea))
    then
        System.out.println("Patient " + $patient.getFullname() + ": Detected bradypnea.");
        Alarm alarm = new Alarm(0L, $id, $doctorId, SymptomEvent.Symptom.Bradypnea, System.currentTimeMillis());

        modify($postOp){
            addAlarm(alarm)
        }

        procedureRepository.save($procedure);
end
